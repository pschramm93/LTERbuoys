rm(light_file)
data.do=pme_do(do_file,depth.do,deploy,retrieve)
data.temp=rbr_temp(lake_ID,temp_file,depth.temp,deploy,retrieve)
#do CB stuff
#read in temperatures
temp=read.table(temp_file,sep=",",skip=1)
#set names
names(temp)=c("time_UTC","d1","d2","d3","d4","d5","d6","d7","d8","d9")
#Declare time as Posix
temp$time_UTC=as.POSIXct(temp$time_UTC,tz="America/Chicago",'%Y-%m-%d %H:%M:%OS')
attributes(temp$time_UTC)$tzone<-"UTC"
#Reverse order of temps, since RBR thinks we want the bottom temps first...
temp2=temp[,c(1,10,9,8,7,6,5,4,3,2)]
#Set names of columns based on depth of sensors(build depth vector,add tempC_z_cm to names,set names)
names_temp=c(depth.temp+0,depth.temp+25,depth.temp+50,depth.temp+75,depth.temp+100,
depth.temp+125,depth.temp+150,depth.temp+175,depth.temp+200)
names_temp=paste('tempC_',names_temp,'_cm',sep='')
names(temp2)=c("date_time_UTC",names_temp)
#Subset data to deployment interval
temp2=subset(temp2,date_time_UTC>=deploy &
date_time_UTC<=retrieve)
View(temp)
deploy=  as.POSIXct('11/01/2019 18:30',tz='UTC','%m/%d/%Y %H:%M')
retrieve=as.POSIXct('05/20/2020 01:00',tz='UTC','%m/%d/%Y %H:%M')
#Declare time as Posix
temp$time_UTC=as.POSIXct(temp$time_UTC,tz="America/Chicago",'%Y-%m-%d %H:%M:%OS')
attributes(temp$time_UTC)$tzone<-"UTC"
#Reverse order of temps, since RBR thinks we want the bottom temps first...
temp2=temp[,c(1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2)]
rm(temp2)
temp=read.table(temp_file,sep=",",skip=1)
#set names
names(temp)=c("time_UTC","d1","d2","d3","d4","d5","d6","d7","d8","d9","d10","d11","d12","d13","d14","d15","d16","d17","d18","d19","d20")
#Declare time as Posix
temp_file=paste(lake_file,"Temp/063327_20200520_1257/063327_20200520_1257_data.txt",sep="/")
temp_file
View(temp)
rm(temp)
temp <- read.csv("Y:/GLEON/BuoyData/CrystalBog/2019-2020_underice/Temp/063327_20200520_1257/063327_20200520_1257_data.txt")
View(temp)
View(temp)
temp_file2="Y:/GLEON/BuoyData/CrystalBog/2019-2020_underice/Temp/063327_20200520_1257/063327_20200520_1257_data.txt"
temp_file
temp_file2
#set names
names(temp)=c("time_UTC","d1","d2","d3","d4","d5","d6","d7","d8","d9")
#Declare time as Posix
temp$time_UTC=as.POSIXct(temp$time_UTC,tz="America/Chicago",'%Y-%m-%d %H:%M:%OS')
attributes(temp$time_UTC)$tzone<-"UTC"
#Reverse order of temps, since RBR thinks we want the bottom temps first...
temp2=temp[,c(1,10,9,8,7,6,5,4,3,2)]
#Set names of columns based on depth of sensors(build depth vector,add tempC_z_cm to names,set names)
names_temp=c(depth.temp+0,depth.temp+25,depth.temp+50,depth.temp+75,depth.temp+100,
depth.temp+125,depth.temp+150,depth.temp+175,depth.temp+200)
names_temp=paste('tempC_',names_temp,'_cm',sep='')
names(temp2)=c("date_time_UTC",names_temp)
#Subset data to deployment interval
temp2=subset(temp2,date_time_UTC>=deploy &
date_time_UTC<=retrieve)
#Message if temp data is less than -30, indicating string not attached
#Only do if subsetting data
if (min(temp2[,2])<0){
message("Temperate is less than -20, temp string likely not attached")
}
if(any(temp2[grep("tempC_",names(temp2))][,1]>30)=="TRUE"){message("Temperature above 30c")}
if(mean(temp2[grep("tempC_",names(temp2))][,1]) <
mean(temp2[grep("tempC_",names(temp2))][,length(temp2[grep("tempC_",names(temp2))])])){message("Surface mean less than bottom mean")}
rbr_temps=temp2
#Send data table out
return(rbr_temps)
View(rbr_temps)
data.temp=rbr_temps
data=merge(data.do,data.temp,by.x="date_time_UTC",by.y="date_time_UTC",all=T)
#QC Check for date times duplicates...all other QC is done within functions
if (anyDuplicated(data$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
View(data)
data.temp$date_time_UTC=round(data.temp$date_time_UTC,"mins")
View(data.temp)
rm(data)
data=merge(data.do,data.temp,by.x="date_time_UTC",by.y="date_time_UTC",all=T)
View(data)
rm(data)
data.temp$date_time_UTC=as.POSIXct(data.temp$date_time_UTC)
#Run buoy run--Shouldn't need to change
data.do=pme_do(do_file,depth.do,deploy,retrieve)
data=merge(data.do,data.temp,by.x="date_time_UTC",by.y="date_time_UTC",all=T)
View(data)
#QC Check for date times duplicates...all other QC is done within functions
if (anyDuplicated(data$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
names(data)
names(data)=c("date_time_UTC","temp_minidot_c" ,"do_mgl_60cm","do_sat_60cm","tempC_88_cm","tempC_98_cm","tempC_123_cm","tempC_148_cm","tempC_173_cm","tempC_198_cm","tempC_223_cm")
names(data)=c("date_time_UTC","temp_minidot_c" ,"do_mgl_60cm","do_sat_60cm","tempC_88_cm","tempC_98_cm","tempC_123_cm","tempC_148_cm","tempC_173_cm","tempC_198_cm","tempC_223_cm""tempC_248_cm","tempC_273_cm",)
names(data)=c("date_time_UTC","temp_minidot_c" ,"do_mgl_60cm","do_sat_60cm","tempC_88_cm","tempC_98_cm","tempC_123_cm","tempC_148_cm","tempC_173_cm","tempC_198_cm","tempC_223_cm""tempC_248_cm","tempC_273_cm")
names(data)=c("date_time_UTC","temp_minidot_c" ,"do_mgl_60cm","do_sat_60cm","tempC_88_cm","tempC_98_cm","tempC_123_cm","tempC_148_cm","tempC_173_cm","tempC_198_cm","tempC_223_cm","tempC_248_cm","tempC_273_cm")
plot(data$date_time_UTC,data$do_mgl_60cm)
plot(data$date_time_UTC,data$tempC_88_cm)
points(data$date_time_UTC,data$tempC_273_cm,col="blue")
points(data$date_time_UTC,data$tempC_223_cm,col="pink")
points(data$date_time_UTC,data$tempC_198_cm,col="red")
#Write Data
write.csv(data,paste(lake_file,file_name,sep="/"),row.names = FALSE)
plot(temp2$date_time_UTC,temp2[grep("tempC_",names(temp2))][,1],col="red")
points(temp2$date_time_UTC,temp2[grep("tempC_",names(temp2))][,length(temp2[grep("tempC_",names(temp2))])]),col="blue")
points(temp2$date_time_UTC,temp2[grep("tempC_",names(temp2))][,length(temp2[grep("tempC_",names(temp2))])],col="blue")
legend(c("Surface","Bottom"))
?legend
legend("topright",c("Surface","Bottom"))
legend("topright",legend=c("Surface","Bottom"))
legend("topleft",legend=c("Surface","Bottom"))
legend("topleft",legend=c("Surface","Bottom"),fill = c("red","blue"))
plot(temp2$date_time_UTC,temp2[grep("tempC_",names(temp2))][,1],col="red")
points(temp2$date_time_UTC,temp2[grep("tempC_",names(temp2))][,length(temp2[grep("tempC_",names(temp2))])],col="blue")
legend("topleft",legend=c("Surface","Bottom"),fill = c("red","blue"))
plot(temp2$date_time_UTC,temp2[grep("tempC_",names(temp2))][,1],col="red",xlab = "Month",ylab = "Temp C")
points(temp2$date_time_UTC,temp2[grep("tempC_",names(temp2))][,length(temp2[grep("tempC_",names(temp2))])],col="blue")
legend("topleft",legend=c("Surface","Bottom"),fill = c("red","blue"))
do_pme=read.table(do_file,sep=",",skip=9)
#rename variables
names(do_pme)=c("timestamp","date_time_UTC","time_cen","batt_v","temp_minidot_c",paste("do_mgl_",depth.do,'cm',sep=''),paste("do_sat_",depth.do,'cm',sep=''),"Q")
#Convert time vector to posix
do_pme$date_time_UTC=as.POSIXct(do_pme$date_time_UTC,tz='UTC','%Y-%m-%d %H:%M:%S')
#QC check on the Q value and battery
if(any((do_pme$Q<0.9)=="TRUE")){print("Q factor less than 0.9")}
if(any((do_pme$Q<0.75)=="TRUE")){stop("Q factor less than 0.75")}
if(any((do_pme$Q>1.15)=="TRUE")){print("Q factor greater tha 1.15, not sure if this is bad...")}
if(any((do_pme$batt_v<2.5)=="TRUE")){print("Battery less than 2.5V")}
#remove extra variables
do_pme=within(do_pme,rm(list=c("time_cen","Q","timestamp","batt_v")))
if (missing(deploy)||missing(retrieve)){
#proceed to return the data
message("No deployment or retrieval times given")
} else{
#Subset data to deployment interval
do_pme=subset(do_pme,date_time_UTC>=deploy &
date_time_UTC<=retrieve)
}
plot(do_pme$date_time_UTC,do_pme[grep("do_mgl",names(do_pme))])
do_pme[grep("do_mgl",names(do_pme))]
plot(do_pme$date_time_UTC,do_pme[,grep("do_mgl",names(do_pme))])
rm(list=ls())
#Set your working dir and load functions, won't need after published as package
wd=c("C:/Users/Paul/Dropbox/LTER_R/NTLbuoys/R")
source(paste(wd,"/loadbuoyfunc.R",sep=""))
loadbuoyfunc(wd)
depth.do=45
depth.do=45
depth.light=20
depth.light2=75
depth.light3=125
depth.light4=225
deploy=  as.POSIXct('06/11/2021 20:00',tz='UTC','%m/%d/%Y %H:%M')
retrieve=as.POSIXct('11/08/2021 01:00',tz='UTC','%m/%d/%Y %H:%M')
#set lake ID for temp string
lake_ID="CB"
#Set output file name
file_name="CB_2021.csv"
#Set Files, if no data present set to NULL
lake_file=  'Y:/GLEON/BuoyData/CrystalBog/2021'
deploy=  as.POSIXct('05/20/2020 20:00',tz='UTC','%m/%d/%Y %H:%M')
retrieve=as.POSIXct('10/28/2028 01:00',tz='UTC','%m/%d/%Y %H:%M')
depth.temp=30
depth.do=90
depth.light=40
lake_ID="CB"
#Set output file name
file_name="CB_2020.csv"
#Se
#Set Files, if no data present set to NULL
lake_file=  'Y:/GLEON/BuoyData/CrystalBog/2020'
lake_file=  'Y:/GLEON/BuoyData/CrystalBog/2020'
do_file=paste(lake_file,"DO/CB_2020_do.txt",sep="/")
temp_file=paste(lake_file,"Temp/063327_20201028_1708/063327_20201028_1708_data.txt",sep="/")
light_file=paste(lake_file,"Light/CB_2020.csv",sep="/")
data.do=pme_do(do_file,depth.do,deploy,retrieve)
data.temp=rbr_temp(lake_ID,temp_file,depth.temp,deploy,retrieve)
deploy=  as.POSIXct('05/20/2020 22:00',tz='UTC','%m/%d/%Y %H:%M')
retrieve=as.POSIXct('10/28/2028 00:00',tz='UTC','%m/%d/%Y %H:%M')
data.temp=rbr_temp(lake_ID,temp_file,depth.temp,deploy,retrieve)
View(data.temp)
retrieve=as.POSIXct('10/28/2020 15:00',tz='UTC','%m/%d/%Y %H:%M')
data.temp=rbr_temp(lake_ID,temp_file,depth.temp,deploy,retrieve)
data.do=pme_do(do_file,depth.do,deploy,retrieve)
data.light=hobo_light(light_file,depth.light,deploy,retrieve)
if (is.null(light_file)){stop("No light file")}
if (missing(light_file)){stop("Please provide file path for Hobo light sensor CSV")}
if (missing(depth.light)){stop("Please provide depth of Light sensor")}
light=read.table(light_file,skip=1,sep = ',',header = T) #Read in data
names(light)=c("rec_num",'date_cdt','temp',paste('lux_',depth.light,'cm',sep=""))   #set names
light$date_cdt=as.POSIXct(light$date_cdt,tz='America/Chicago','%m/%d/%y %I:%M:%S %p')  #make times POSIX format
light=read.table(light_file,skip=1,sep = ',',header = T) #Read in data
names(light)=c("rec_num",'date_cdt','temp',paste('lux_',depth.light,'cm',sep=""))   #set names
View(data.temp)
light$date_cdt=as.POSIXct(light$date_cdt,tz='America/Chicago','%m/%d/%y %H:%M:%S')  #make times POSIX format
light$date_time_UTC=format(light$date_cdt,tz="UTC",usetz=T)                             #make UTC column
light$date_time_UTC=as.POSIXct(light$date_time_UTC,tz="UTC",'%Y-%m-%d %H:%M:%S')
#untested, seems to work tho...
light$date_time_UTC=round(light$date_time_UTC,"mins")                   #round time stamps to minute
light$date_time_UTC=as.POSIXct(light$date_time_UTC)                                 #convert back to POSIX
#remove unwanted columns
light=within(light,rm(list=c('rec_num','date_cdt','temp')))
#Subset data to deployment interval
if (missing(deploy)||missing(retrieve)){
#proceed to return the data
message("No deployment or retrieval times given, data not subseted")
} else{
#Subset data to deployment interval
light=subset(light,date_time_UTC>=deploy &
date_time_UTC<=retrieve)
}
#Check for duplicated time stamps
if (anyDuplicated(light$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
head(lights[,2])
head(light[,2])
head(light[21])
head(light[,1])
plot(light$date_time_UTC,light[,1])
plot(light$date_time_UTC,light[,1],xlab = "Month",ylab="Lux")
data.light=hobo_light(light_file,depth.light,deploy,retrieve)
rm(data.light)
data.light=hobo_light(light_file,depth.light,deploy,retrieve)
rm(data.light)
rm(light)
if (is.null(light_file)){stop("No light file")}
if (missing(light_file)){stop("Please provide file path for Hobo light sensor CSV")}
if (missing(depth.light)){stop("Please provide depth of Light sensor")}
light=read.table(light_file,skip=1,sep = ',',header = T) #Read in data
names(light)=c("rec_num",'date_cdt','temp',paste('lux_',depth.light,'cm',sep=""))   #set names
light$date_cdt=as.POSIXct(light$date_cdt,tz='America/Chicago','%m/%d/%y %H:%M:%S')  #make times POSIX format
light$date_time_UTC=format(light$date_cdt,tz="UTC",usetz=T)                             #make UTC column
light$date_time_UTC=as.POSIXct(light$date_time_UTC,tz="UTC",'%Y-%m-%d %H:%M:%S')
#untested, seems to work tho...
light$date_time_UTC=round(light$date_time_UTC,"mins")                   #round time stamps to minute
light$date_time_UTC=as.POSIXct(light$date_time_UTC)                                 #convert back to POSIX
#remove unwanted columns
light=within(light,rm(list=c('rec_num','date_cdt','temp')))
#Subset data to deployment interval
if (missing(deploy)||missing(retrieve)){
#proceed to return the data
message("No deployment or retrieval times given, data not subseted")
} else{
#Subset data to deployment interval
light=subset(light,date_time_UTC>=deploy &
date_time_UTC<=retrieve)
}
#Check for duplicated time stamps
if (anyDuplicated(light$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
plot(light$date_time_UTC,light[,1],xlab = "Month",ylab="Lux")
return(light)
hobo_light=function(light_file,depth.light,deploy,retrieve){
if (is.null(light_file)){stop("No light file")}
if (missing(light_file)){stop("Please provide file path for Hobo light sensor CSV")}
if (missing(depth.light)){stop("Please provide depth of Light sensor")}
light=read.table(light_file,skip=1,sep = ',',header = T) #Read in data
names(light)=c("rec_num",'date_cdt','temp',paste('lux_',depth.light,'cm',sep=""))   #set names
light$date_cdt=as.POSIXct(light$date_cdt,tz='America/Chicago','%m/%d/%y %H:%M:%S')  #make times POSIX format
#light$date_cdt=as.POSIXct(light$date_cdt,tz='America/Chicago','%m/%d/%y %I:%M:%S %p')  #make times POSIX format, AM/PM
light$date_time_UTC=format(light$date_cdt,tz="UTC",usetz=T)                             #make UTC column
light$date_time_UTC=as.POSIXct(light$date_time_UTC,tz="UTC",'%Y-%m-%d %H:%M:%S')
#untested, seems to work tho...
light$date_time_UTC=round(light$date_time_UTC,"mins")                   #round time stamps to minute
light$date_time_UTC=as.POSIXct(light$date_time_UTC)                                 #convert back to POSIX
#remove unwanted columns
light=within(light,rm(list=c('rec_num','date_cdt','temp')))
#Subset data to deployment interval
if (missing(deploy)||missing(retrieve)){
#proceed to return the data
message("No deployment or retrieval times given, data not subseted")
} else{
#Subset data to deployment interval
light=subset(light,date_time_UTC>=deploy &
date_time_UTC<=retrieve)
}
#Check for duplicated time stamps
if (anyDuplicated(light$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
plot(light$date_time_UTC,light[,1],xlab = "Month",ylab="Lux")
return(light)
}
hobo_light(light_file,40,deploy,retrieve)
data.light=hobo_light(light_file,40,deploy,retrieve)
data=merge(data.do,data.temp,by.x="date_time_UTC",by.y="date_time_UTC",all=T)
data=merge(data,data.light,by.x="date_time_UTC",by.y="date_time_UTC",all = T)
#QC Check for date times duplicates...all other QC is done within functions
if (anyDuplicated(data$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
View(data)
data.temp$date_time_UTC=round.POSIXt(data.temp$date_time_UTC,units="mins")
data.temp$date_time_UTC=as.POSIXct(data.temp$date_time_UTC)
rm(data)
data=merge(data.do,data.temp,by.x="date_time_UTC",by.y="date_time_UTC",all=T)
data=merge(data,data.light,by.x="date_time_UTC",by.y="date_time_UTC",all = T)
View(data)
#QC Check for date times duplicates...all other QC is done within functions
if (anyDuplicated(data$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
#Write Data
write.csv(data,paste(lake_file,file_name,sep="/"),row.names = FALSE)
View(data)
rm(list=ls())
#Set your working dir and load functions, won't need after published as package
wd=c("C:/Users/Paul/Dropbox/LTER_R/NTLbuoys/R")
source(paste(wd,"/loadbuoyfunc.R",sep=""))
loadbuoyfunc(wd)
#set lake ID for temp string
lake_ID="CB"
#Set output file name
file_name="CB_2020-2021_underice.csv"
deploy=  as.POSIXct('10/29/2020 22:00',tz='UTC','%m/%d/%Y %H:%M')
retrieve=as.POSIXct('05/21/2021 10:00',tz='UTC','%m/%d/%Y %H:%M')
84+60
depth.temp=NULL
depth.do=144
depth.light=84
#Set Files, if no data present set to NULL
lake_file=  'Y:/GLEON/BuoyData/CrystalBog/2020-2021_underice'
do_file=paste(lake_file,"DO/CB_2020-2021ui_do.txt",sep="/")
light_file=paste(lake_file,"Light/CB_underice_2021.csv",sep="/")
data.do=pme_do(do_file,depth.do,deploy,retrieve)
data.do=pme_do(do_file,depth.do,deploy,retrieve)
loadbuoyfunc(wd)
data.do=pme_do(do_file,depth.do,deploy,retrieve)
loadbuoyfunc(wd)
data.light=hobo_light(light_file,depth.light,deploy,retrieve)
light=read.table(light_file,skip=1,sep = ',',header = T) #Read in data
names(light)=c("rec_num",'date_cdt','temp',paste('lux_',depth.light,'cm',sep=""))   #set names
light$date_cdt=as.POSIXct(light$date_cdt,tz='America/Chicago','%m/%d/%y %H:%M:%S')  #make times POSIX format
light$date_time_UTC=format(light$date_cdt,tz="UTC",usetz=T)                             #make UTC column
light$date_time_UTC=as.POSIXct(light$date_time_UTC,tz="UTC",'%Y-%m-%d %H:%M:%S')
#untested, seems to work tho...
light$date_time_UTC=round(light$date_time_UTC,"mins")                   #round time stamps to minute
light$date_time_UTC=as.POSIXct(light$date_time_UTC)                                 #convert back to POSIX
#remove unwanted columns
light=within(light,rm(list=c('rec_num','date_cdt')))
#Subset data to deployment interval
if (missing(deploy)||missing(retrieve)){
#proceed to return the data
message("No deployment or retrieval times given, data not subseted")
} else{
#Subset data to deployment interval
light=subset(light,date_time_UTC>=deploy &
date_time_UTC<=retrieve)
}
#Check for duplicated time stamps
if (anyDuplicated(light$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
View(light)
anyDuplicated(light$date_time_UTC)
light=read.table(light_file,skip=1,sep = ',',header = T) #Read in data
names(light)=c("rec_num",'date_cdt','temp',paste('lux_',depth.light,'cm',sep=""))   #set names
#light$date_cdt=as.POSIXct(light$date_cdt,tz='America/Chicago','%m/%d/%y %H:%M:%S')  #make times POSIX format
light$date_cdt=as.POSIXct(light$date_cdt,tz='America/Chicago','%m/%d/%y %I:%M:%S %p')  #make times POSIX format, AM/PM
light$date_time_UTC=format(light$date_cdt,tz="UTC",usetz=T)                             #make UTC column
light$date_time_UTC=as.POSIXct(light$date_time_UTC,tz="UTC",'%Y-%m-%d %H:%M:%S')
#untested, seems to work tho...
light$date_time_UTC=round(light$date_time_UTC,"mins")                   #round time stamps to minute
light$date_time_UTC=as.POSIXct(light$date_time_UTC)                                 #convert back to POSIX
#remove unwanted columns
light=within(light,rm(list=c('rec_num','date_cdt')))
#Subset data to deployment interval
if (missing(deploy)||missing(retrieve)){
#proceed to return the data
message("No deployment or retrieval times given, data not subseted")
} else{
#Subset data to deployment interval
light=subset(light,date_time_UTC>=deploy &
date_time_UTC<=retrieve)
}
#Check for duplicated time stamps
if (anyDuplicated(light$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
plot(light$date_time_UTC,light[,1],xlab = "Month",ylab="Lux")
source(paste(wd,"/loadbuoyfunc.R",sep=""))
loadbuoyfunc(wd)
data.light=hobo_light(light_file,depth.light,deploy,retrieve)
data=merge((data.light,data.do,by.x="date_time_UTC",by.y="date_time_UTC",all=T))
data=merge(data.light,data.do,by.x="date_time_UTC",by.y="date_time_UTC",all=T)
View(data)
names(data)=c("date_time_UTC","temp_84cm","lux_84cm","temp_144cm","do_mgl_144cm","do_sat_144cm","DO_Qfactor")
plot(data$date_time_UTC,data$DO_Qfactor)
data$do_flag=NA
if (data$DO_Qfactor<0.7){data$do_flag="V"}
View(data)
if (any(data$DO_Qfactor<0.7)){data$do_flag="V"}
View(data)
data$do_flag=NA
for(i in 1:length(data$DO_Qfactor)){
if(data$DO_Qfactor[i]<0.7){data$do_flag[i]="V"}
}
View(data)
?if
for(i in 1:length(data$DO_Qfactor)){
if(data$DO_Qfactor[i]<0.7){data$do_flag[i]="V"}
else {data$do_flag[i]=NA}
}
View(data)
i=1
for(i in 1:length(data$DO_Qfactor)){
if(data$DO_Qfactor[i]<0.7){data$do_flag[i]=="V"}
else {data$do_flag[i]==NA}
}
data$DO_Qfactor[1]
data$DO_Qfactor[1539]
data$DO_Qfactor[15039]
data$do_flag[1]
data$do_flag[12535]
i=1
for(i in 1:length(data$DO_Qfactor)){
if(data$DO_Qfactor[i]<0.7){data$do_flag[i]=="V"}
else {data$do_flag[i]=NA}
}
View(data)
data$do_flag=ifelse(data$DO_Qfactor<0.7,"V",NA)
View(data)
#Read in text file
do_pme=read.table(do_file,sep=",",skip=9)
#rename variables
names(do_pme)=c("timestamp","date_time_UTC","time_cen","batt_v","temp_minidot_c",paste("do_mgl_",depth.do,'cm',sep=''),paste("do_sat_",depth.do,'cm',sep=''),"Q")
#Convert time vector to posix
do_pme$date_time_UTC=as.POSIXct(do_pme$date_time_UTC,tz='UTC','%Y-%m-%d %H:%M:%S')
if(any((do_pme$Q<0.9)=="TRUE")){print("Q factor less than 0.9")}
if(any((do_pme$Q<0.75)=="TRUE")){print("Q factor less than 0.75")}
else{do_pme$do_flag=ifelse(do_pme$Q<0.7,"V",NA)}
if(any((do_pme$Q<0.75)=="TRUE")){print("Q factor less than 0.75")}
else{do_pme$do_flag=ifelse(do_pme$Q<0.7,"V",NA)}
if(any((do_pme$Q<0.75)=="TRUE")){{do_pme$do_flag=ifelse(do_pme$Q<0.7,"V",NA)}
if(any((do_pme$Q>1.15)=="TRUE")){print("Q factor greater tha 1.15, not sure if this is bad...")}
if(any((do_pme$batt_v<2.5)=="TRUE")){print("Battery less than 2.5V")}
#remove extra variables
do_pme=within(do_pme,rm(list=c("time_cen","timestamp","batt_v")))
if (missing(deploy)||missing(retrieve)){
#proceed to return the data
message("No deployment or retrieval times given")
} else{
#Subset data to deployment interval
do_pme=subset(do_pme,date_time_UTC>=deploy &
date_time_UTC<=retrieve)
}
#QC
if(any(do_pme[grep("do_mgl",names(do_pme))]<0)=="TRUE") {stop("DO less than 0")}
if(any(do_pme[grep("do_mgl",names(do_pme))]>15)=="TRUE"){stop("DO greater than 15mg/L")}
plot(do_pme$date_time_UTC,do_pme[,grep("do_mgl",names(do_pme))])
return(do_pme)
}
View(do_pme)
wd=c("C:/Users/Paul/Dropbox/LTER_R/NTLbuoys/R")
source(paste(wd,"/loadbuoyfunc.R",sep=""))
loadbuoyfunc(wd)
wd=c("C:/Users/Paul/Dropbox/LTER_R/NTLbuoys/R")
source(paste(wd,"/loadbuoyfunc.R",sep=""))
loadbuoyfunc(wd)
data.do=pme_do(do_file,depth.do,deploy,retrieve)
data=merge(data.do,data.light,by.x="date_time_UTC",by.y="date_time_UTC",all=T)
View(data)
#QC Check for date times duplicates...all other QC is done within functions
if (anyDuplicated(data$date_time_UTC)!=0){stop("Duplicated Dates/Times")}
#Write Data
write.csv(data,paste(lake_file,file_name,sep="/"),row.names = FALSE)
rm(list=ls())
#Set your working dir and load functions, won't need after published as package
wd=c("C:/Users/Paul/Dropbox/LTER_R/NTLbuoys/R")
source(paste(wd,"/loadbuoyfunc.R",sep=""))
loadbuoyfunc(wd)
depth.temp=NULL
depth.do=45
depth.light=75
depth.light2=225
deploy=  as.POSIXct('06/11/2021 22:00',tz='UTC','%m/%d/%Y %H:%M')
retrieve=as.POSIXct('11/08/2021 10:00',tz='UTC','%m/%d/%Y %H:%M')
lake_ID="CB"
#Set output file name
file_name="CB_2021.csv"
#Set Files, if no data present set to NULL
lake_file=  'Y:/GLEON/BuoyData/CrystalBog/2021'
#Set output file name
file_name="CB_2021.csv"
do_file=paste(lake_file,"DO/CB_2021_do.txt",sep="/")
light_file=paste(lake_file,"Light/CB_50cm.csv",sep="/")
light_file2=paste(lake_file,"Light/CB_2m.csv",sep="/")
data.do=pme_do(do_file,depth.do,deploy,retrieve)
data.light=hobo_light(light_file,depth.light,deploy,retrieve)
light_file=paste(lake_file,"Light/CB_50cm.csv",sep="/")
data.light=hobo_light(light_file,depth.light,deploy,retrieve)
data.light2=hobo_light(light_file2,depth.light2,deploy,retrieve)
names(data.light)=c("tempC_75cm","lux_75cm","date_time_UTC")
names(data.light2)=c("tempC_225cm","lux_225cm",date_time_UTC)
names(data.light2)=c("tempC_225cm","lux_225cm","date_time_UTC")
data=merge(data.do,data.light,by.x="date_time_UTC",by.y="date_time_UTC",all=T)
data=merge(data,data.light2,by.x="date_time_UTC",by.y="date_time_UTC",all=T)
View(data)
plot(data$date_time_UTC,data$tempC_75cm)
names(data)
names(data)=c("date_time_UTC","tempC_45cm","do_mgl_45cm","do_sat_45cm", "Q" , "tempC_75cm" , "lux_75cm","tempC_225cm"  ,  "lux_225cm")
#Write Data
write.csv(data,paste(lake_file,file_name,sep="/"),row.names = FALSE)
plot(data$date_time_UTC,data$tempC_225cm)
points(data$date_time_UTC,data$tempC_75cm,col="blue")
plot(data$date_time_UTC,data$tempC_75cm,col="red")
points(data$date_time_UTC,data$tempC_225cm,col="blue")
points(data$date_time_UTC,data$tempC_45cm,col="magenta")
plot(data$date_time_UTC,data$lux_75cm)
points(data$date_time_UTC,data$lux_225cm,col="blue")
max(data$lux_225cm)
max(data$lux_225cm,na.rm = T)
a=data$lux_75cm-data$lux_225cm
plot(data$date_time_UTC,a)
rm(a)
plot(data$date_time_UTC,data$do_mgl_45cm)
rm(list=ls())
wd=c("C:/Users/Paul/Dropbox/LTER_R/NTLbuoys/R")
source(paste(wd,"/loadbuoyfunc.R",sep=""))
loadbuoyfunc(wd)
deploy=  as.POSIXct('06/21/2019 22:00',tz='UTC','%m/%d/%Y %H:%M')
retrieve=as.POSIXct('10/31/2019 10:00',tz='UTC','%m/%d/%Y %H:%M')
#Set sensor depths
depth.temp=10
depth.do=70
depth.light=25
